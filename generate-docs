#!/usr/bin/env python

import os
import shutil
from ConfigParser import SafeConfigParser, NoOptionError, NoSectionError

DOC_DIR_ABS = os.path.join(os.getcwd(), "docs", "generated")


def remove_files_from_last_run():
    if os.path.isdir(DOC_DIR_ABS):
        shutil.rmtree(DOC_DIR_ABS)


def add_module(modules, file_name, name, args, doc):
    if name.startswith("test"):
        return
    summary, description, doc_args = parse_doc(doc, file_name, name)

    for doc_arg in doc_args.keys():
        if doc_arg not in [arg['name'] for arg in args]:
            msg = 'Documentation for non-existing parameter \'%s\'' % (doc_arg)
            doc_warning(msg, file_name, name)

    for arg in args:
        if arg['name'] not in doc_args:
            msg = 'No documentation for parameter \'%s\'' % (arg['name'])
            doc_warning(msg, file_name, name)
        arg['description'] = doc_args[arg['name']]

    modules[name] = {
        'source': file_name,
        'summary': summary,
        'description': description,
        'args': args,
        }


def doc_warning(msg, file_name, module_name):
    raise RuntimeError('%s -- File %s, module %s' % (
            msg, file_name, module_name))


def parse_block_tags(paragraph, file_name, module_name):
    parameters = {}
    mode = None
    name = None
    value = ''
    for word in paragraph.split(' ') + [None]:
        if word == '':
            pass
        elif word == '@param' or word is None:
            if mode == '@param':
                if name in parameters:
                    msg = 'Parameter \'%s\' occurs more than once in doc' % (
                        name)
                    doc_warning(msg, file_name, module_name)
                if not value:
                    msg = 'Empty documentation for parameter \'%s\'' % (name)
                    doc_warning(msg, file_name, module_name)
                parameters[name] = value
            elif mode is None:
                pass
            else:
                msg = 'Unknown mode \'%s\'' % (word)
                doc_warning(msg, file_name, module_name)
            mode = word
            name = None
            value = ''
        else:
            if mode == '@param':
                if name:
                    if value:
                        value += ' '
                    value += word
                else:
                    name = word
            else:
                msg = 'Unknown mode \'%s\'' % (word)
                doc_warning(msg, file_name, module_name)
    return parameters


def parse_doc(doc_lines, file_name, module_name):
    summary = None
    description = ''
    parameters = {}

    foundBlockTags = False
    if doc_lines:
        kind = None
        paragraph = None
        for line in doc_lines + [' *']:
            if line == ' *':
                if kind is None:
                    doc_warning('Empty doc chunk', file_name, module_name)
                elif kind == 'text':
                    if paragraph.startswith('<p>'):
                        paragraph = paragraph[4:]
                    if paragraph.endswith('</p>'):
                        paragraph = paragraph[:-4]

                    if not summary:
                        summary = paragraph
                        if not summary.endswith('.'):
                            msg = 'First doc paragraph does not end in \'.\''
                            doc_warning(msg, file_name, module_name)

                    if description:
                        description += '\n'
                    description += '\n%s\n' % (paragraph)
                elif kind == 'block-tags':
                    parameters = parse_block_tags(paragraph, file_name,
                                                  module_name)
                else:
                    msg = 'Unknown paragraph kind \'%s\'' % (kind)
                    doc_warning(msg, file_name, module_name)
                kind = None
                paragraph = None
            else:
                if not line.startswith(' * '):
                    msg = 'Line \'%s\' does not start in \' * \'' % (line)
                    doc_warning(msg, file_name, module_name)
                line = line[3:]
                if kind is None:
                    if line.startswith('@param'):
                        kind = 'block-tags'
                        if foundBlockTags:
                            msg = 'Line \'%s\' starts second ' + \
                                'block-tags chunk in \' * \'' % (line)
                            doc_warning(msg, file_name, module_name)
                        foundBlockTags = True
                    else:
                        kind = 'text'
                    paragraph = line
                elif kind == 'text':
                    if paragraph:
                        paragraph += ' '
                    paragraph += line
                elif kind == 'block-tags':
                    if paragraph:
                        paragraph += ' '
                    paragraph += line
                else:
                    msg = 'Unknown paragraph kind \'%s\'' % (kind)
                    doc_warning(msg, file_name, module_name)

    return summary, description, parameters


def parse_arg_unparsed(arg_unparsed):
    to_parse = arg_unparsed.split("(")[1]
    paren_level = 1
    in_string = False
    args = []

    part = ""
    arg_name = ""
    arg_value = ""
    for c in to_parse:
        part += c

        if in_string:
            in_string = (c != '"')
        else:
            parse_arg = False
            if c == '"':
                in_string = True
            elif c in ['(', '[']:
                paren_level += 1
            elif c in [')', ']']:
                paren_level -= 1
                if not paren_level:
                    parse_arg = True
            elif c == '=' and paren_level == 1:
                arg_name = part[:-1].strip()
                part = ""
            elif c == ',' and paren_level == 1:
                parse_arg = True

            if parse_arg:
                arg_value = part[:-1].strip()
                if not arg_name:
                    arg_name = arg_value
                    arg_value = "undef"
                if arg_name:
                    args.append({'name': arg_name, 'value': arg_value})
                arg_name = ""
                arg_value = ""
                part = ""

                if not paren_level:
                    break

    ret = None if paren_level else args
    return ret


def parse_source_file(modules, file_name):
    print "Parsing %s ..." % (file_name)

    resetState = True
    with open(file_name, 'rt') as f:
        for line in f:
            if resetState:
                doc = None
                name = None
                args = None
                arg_unparsed = ""
                resetState = False

            if line.startswith("module "):
                name = line.split("(")[0].split(" ")[-1]

            if name:
                arg_unparsed += line.strip()
                args = parse_arg_unparsed(arg_unparsed)
                if args is not None:
                    add_module(modules, file_name, name, args, doc)
                    resetState = True
            else:
                if line == '/**\n':
                    doc = []
                elif line == ' */\n':
                    pass
                elif line.startswith(' *') and doc is not None:
                    doc.append(line[:-1])
                else:
                    resetState = True


def parse_source_files(directory):
    modules = {}
    walk_root = "."
    for root, dirs, files in os.walk(walk_root):
        rel_path = os.path.relpath(root, walk_root)
        if rel_path == ".":
            rel_path = ""

        files.sort()
        for file_name in files:
            if file_name.endswith('.scad'):
                parse_source_file(modules, os.path.join(rel_path, file_name))

        dirs.sort()
        for prune_dir in [
            '.git',
            'docs',
            'test-expectations',
            'test-results',
        ]:
            if prune_dir in dirs:
                dirs.remove(prune_dir)

    return modules


def get_config():
    config = SafeConfigParser()
    config.read(["settings.conf"])
    return config


def render_doc_get_urls():
    config = get_config()

    try:
        github_user = config.get('repo', 'github_user')
    except (NoSectionError, NoOptionError):
        github_user = None

    try:
        github_repo = config.get('repo', 'github_repo')
    except (NoSectionError, NoOptionError):
        github_repo = None

    try:
        pretty_source_url_base = config.get('repo', 'pretty_source_url_format')
    except (NoSectionError, NoOptionError):
        if github_user and github_repo:
            url_format = 'https://github.com/%s/%s/blob/master/%%s'
            pretty_source_url_base = url_format % (github_user, github_repo)
        else:
            pretty_source_url_base = None

    try:
        raw_source_url_base = config.get('repo', 'raw_source_url_format')
    except (NoSectionError, NoOptionError):
        if github_user and github_repo:
            url_format = 'https://raw.githubusercontent.com/%s/%s/master/%%s'
            raw_source_url_base = url_format % (github_user, github_repo)
        else:
            raw_source_url_base = None

    return (pretty_source_url_base, raw_source_url_base)


def render_doc(modules):
    pretty_source_url_base, raw_source_url_base = render_doc_get_urls()

    os.makedirs(DOC_DIR_ABS)
    for module, conf in modules.iteritems():
        content = []
        content.append('# %s' % (module))
        content.append('')

        if pretty_source_url_base or raw_source_url_base:
            sources = 'Source:'
            if pretty_source_url_base:
                pretty_source_url = pretty_source_url_base % (conf['source'])
                sources += ' [%s](%s)' % (conf['source'], pretty_source_url)
            if raw_source_url_base:
                raw_source_url = raw_source_url_base % (conf['source'])
                sources += ' ([raw](%s))' % (raw_source_url)
            content.append(sources)
            content.append('')

        if conf['summary']:
            content.append(conf['summary'])
            content.append('')

        if conf['description']:
            content.append('* [Description](#description)')
        content.append('* [Arguments](#arguments)')
        content.append('')

        if conf['description']:
            content.append('## Description')
            content.append('')
            content.append(conf['description'])
            content.append('')

        content.append('## Arguments')
        content.append('')
        content.append('<table>')
        header = '<tr><th>Position</th><th>Name</th><th>Default</th>' + \
            '<th>Description</th></tr>'
        content.append(header)
        position = 1
        for arg in conf['args']:
            row_format = '<tr><td>%d</td><td><code>%s</code></td>' + \
                '<td><code>%s</code></td><td>%s</td></tr>'
            row = row_format % (position, arg['name'], arg['value'],
                                arg['description'])
            content.append(row)
            position += 1
        content.append('</table>')
        content.append('')

        file_name = os.path.join(DOC_DIR_ABS, module) + '.md'
        with open(file_name, 'wt') as f:
            f.writelines('\n'.join(content))


def main():
    remove_files_from_last_run()
    modules = parse_source_files(".")
    render_doc(modules)


if __name__ == "__main__":
    main()
